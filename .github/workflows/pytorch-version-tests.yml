name: PyTorch version tests

on:
  # https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#onschedule
  schedule:
    # Run at 00:00 UTC Every Day
    - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 85
    strategy:
      max-parallel: 5
      fail-fast: false
      matrix:
        python-version: [3.9, "3.10", "3.11"]
        pytorch-version: [2.5.1, 2.4.1, 2.3.1, 2.2.2, 1.13.1, 1.12.1, 1.10.0]
        exclude:
          - pytorch-version: 1.10.0
            python-version: "3.10"
          - pytorch-version: 1.10.0
            python-version: "3.11"
          - pytorch-version: 1.11.0
            python-version: "3.10"
          - pytorch-version: 1.11.0
            python-version: "3.11"
          - pytorch-version: 1.12.1
            python-version: "3.11"
          - pytorch-version: 1.13.1
            python-version: "3.11"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install PyTorch ${{ matrix.pytorch-version }}
        run: |
          # Use appropriate install index
          if [[ "${{ matrix.pytorch-version }}" == 2.* || "${{ matrix.pytorch-version }}" == 1.13* || "${{ matrix.pytorch-version }}" == 1.12* || "${{ matrix.pytorch-version }}" == 1.10* ]]; then
            pip install torch==${{ matrix.pytorch-version }} torchvision --extra-index-url https://download.pytorch.org/whl/cpu
          else
            pip install torch==${{ matrix.pytorch-version }} torchvision
          fi

      - name: Install numpy conditionally for PyTorch < 2.3
        run: |
          version=$(python -c "import torch; print(float('.'.join(torch.__version__.split('.')[:2])))")
          if (( $(echo "$version < 2.3" | bc -l) )); then
            pip install "numpy<2.0"
          fi

      - name: Install Ignite dependencies
        run: |
          uv pip install -r requirements-dev.txt
          uv pip install -e .

          # Patch setuptools for old PyTorch versions
          version=$(python -c "import torch; print('.'.join(torch.__version__.split('.')[:2]))")
          if [[ "$version" == "1.9" || "$version" == "1.10" ]]; then
            pip install "setuptools<59"
            python -c "from setuptools import distutils; distutils.version.LooseVersion"
          fi

      - name: Download MNIST
        uses: pytorch-ignite/download-mnist-github-action@master
        with:
          target_dir: /tmp

      - name: Run Tests
        uses: nick-fields/retry@v3
        with:
          max_attempts: 5
          timeout_minutes: 15
          shell: bash
          command: bash tests/run_cpu_tests.sh "not test_time_profilers"
          new_command_on_retry: USE_LAST_FAILED=1 bash -l tests/run_cpu_tests.sh "not test_time_profilers"

  create-issue:
    runs-on: ubuntu-latest
    # https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#needs-context
    needs: build
    if: always() && needs.build.result == 'failure'
    steps:
      - uses: actions/checkout@v4
      - uses: JasonEtco/create-an-issue@v2
        name: Create issue if pytorch version tests failed
        with:
          filename: .github/failed_schedule_issue_template.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
