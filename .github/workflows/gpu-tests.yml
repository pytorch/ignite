name: Run unit tests on GPUs
on:
  push:
    paths:
      - "ignite/**"
      - "tests/ignite/**"
      - "tests/run_gpu_tests.sh"
      - "tests/run_code_style.sh"
      - "examples/**.py"
      - "requirements-dev.txt"
      - ".github/workflows/gpu-tests.yml"
  workflow_dispatch:

concurrency:
  # <workflow_name>-<branch_name>-<true || commit_sha (if branch is protected)>
  group: gpu-tests-${{ github.ref_name }}-${{ !(github.ref_protected) || github.sha }}
  cancel-in-progress: true

jobs:
  gpu-tests:
    runs-on: [self-hosted, 2-gpus]
    timeout-minutes: 45
    defaults:
      run:
        shell: bash
    strategy:
      max-parallel: 1
      fail-fast: true
      matrix:
        pytorch-channel: [pytorch, pytorch-nightly]
    env:
      AGENT_TOOLSDIRECTORY: /tmp/python

    steps:
      - uses: actions/checkout@v3

      - name: Clean python tool path
        run: |
          rm -rf ${AGENT_TOOLSDIRECTORY}

      - uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install PyTorch
        # https://pytorch.org/get-started/locally/
        if: ${{ matrix.pytorch-channel == 'pytorch' }}
        run: |
          pip install --upgrade torch torchvision --extra-index-url https://download.pytorch.org/whl/cu117
          nvidia-smi
          python -c "import torch; print(torch.__version__, ', CUDA is available: ', torch.cuda.is_available()); exit(not torch.cuda.is_available())"
          pip list

      - name: Install PyTorch (nightly)
        # https://pytorch.org/get-started/locally/
        if: ${{ matrix.pytorch-channel == 'pytorch-nightly' }}
        run: |
          pip install --upgrade --pre torch torchvision --extra-index-url https://download.pytorch.org/whl/nightly/cu117
          nvidia-smi
          python -c "import torch; print(torch.__version__, ', CUDA is available: ', torch.cuda.is_available()); exit(not torch.cuda.is_available())"
          pip list

      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Run 1 Node 2 GPUs Unit Tests
        run: |
          bash tests/run_gpu_tests.sh 2

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: gpu-2
          fail_ci_if_error: false

      - name: Install additional example dependencies
        run: pip install fire

      - name: Check training on cifar10, run without backend
        run: |
          export example_path="examples/contrib/cifar10"
          # initial run
          export stop_cmd="--stop_iteration=500"
          CI=1 python ${example_path}/main.py run --checkpoint_every=200 ${stop_cmd}
          # resume
          export resume_opt="--resume-from=/tmp/output-cifar10/resnet18_backend-None-1_stop-on-500/training_checkpoint_400.pt"
          CI=1 python ${example_path}/main.py run --checkpoint_every=200 --num_epochs=7 ${resume_opt}

      - name: Check training on cifar10, run with NCCL backend using torchrun
        run: |
          export example_path="examples/contrib/cifar10"
          # initial run
          export stop_cmd="--stop_iteration=500"
          CI=1 torchrun --nproc_per_node=2 ${example_path}/main.py run --backend=nccl --checkpoint_every=200 ${stop_cmd}
          # resume
          export resume_opt="--resume-from=/tmp/output-cifar10/resnet18_backend-nccl-2_stop-on-500/training_checkpoint_400.pt"
          CI=1 torchrun --nproc_per_node=2 ${example_path}/main.py run --backend=nccl --checkpoint_every=200 --num_epochs=7 ${resume_opt}

      - name: Check training on cifar10, run with NCCL backend using spawn
        run: |
          export example_path="examples/contrib/cifar10"
          # initial run
          export stop_cmd="--stop_iteration=500"
          CI=1 python -u ${example_path}/main.py run --backend=nccl --nproc_per_node=2 --checkpoint_every=200 ${stop_cmd}
          # resume
          export resume_opt="--resume-from=/tmp/output-cifar10/resnet18_backend-nccl-2_stop-on-500/training_checkpoint_400.pt"
          CI=1 python -u ${example_path}/main.py run --backend=nccl --nproc_per_node=2 --checkpoint_every=200 --num_epochs=7 ${resume_opt}
