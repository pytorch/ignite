name: Run unit tests
on:
  push:
    paths-ignore:
    - 'assets/**'
    - '.circleci/**'
    - 'docker/**'
    - 'docs/**'
    - 'conda.recipe'
    - '**.md'
  pull_request:
    paths-ignore:
    - 'assets/**'
    - '.circleci/**'
    - 'docker/**'
    - 'docs/**'
    - 'conda.recipe'
    - '**.md'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 10
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ]
        python-version: [3.5, 3.6, 3.7, 3.8]
        pytorch-channel: [pytorch, pytorch-nightly]
        exclude:
          # excludes pytorch-nightly python 3.5 as it was dropped
          - pytorch-channel: pytorch-nightly
            python-version: 3.5
        include:
          # includes a single build on windows
          - os: windows-latest
            pytorch-channel: pytorch
            python-version: 3.7
            skip-distrib-tests: 1
          # includes a single build on macosx
          - os: macos-latest
            pytorch-channel: pytorch
            python-version: 3.7
            skip-distrib-tests: 1

    steps:
    - uses: actions/checkout@v2
    - name: Setup Miniconda
      uses: goanpeca/setup-miniconda@v1
      with:
        miniconda-version: "latest"
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      shell: bash -l {0}
      run: |
        conda install pytorch torchvision cpuonly -c ${{ matrix.pytorch-channel }}
        pip install -r requirements-dev.txt
        # Fixes #1153
        pip install --upgrade scipy==1.4.1
        python setup.py install

    - name: Run Mypy
      shell: bash -l {0}
      if: ${{ matrix.os == 'ubuntu-latest' && matrix.python-version != '3.5' }}
      run: |
        pip install mypy
        mypy --config-file mypy.ini

    - name: Run Tests
      shell: bash -l {0}
      run: |
        SKIP_DISTRIB_TESTS=${{ matrix.skip-distrib-tests }} CI_PYTHON_VERSION="${{ matrix.python-version }}" sh tests/run_cpu_tests.sh

    - name: Run MNIST Examples
      shell: bash -l {0}
      run: |
        # MNIST
        # 1) mnist.py
        python examples/mnist/mnist.py --epochs=1

    - name: Run MNIST with loggers Examples
      shell: bash -l {0}
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        # 2) mnist_with_visdom.py
        python -c "from visdom.server import download_scripts; download_scripts()" # download scripts : https://github.com/facebookresearch/visdom/blob/master/py/server.py#L929
        python -m visdom.server &
        sleep 10
        python examples/mnist/mnist_with_visdom.py --epochs=1
        kill %1
        # 3.1) mnist_with_tensorboard.py with tbX
        python examples/mnist/mnist_with_tensorboard.py --epochs=1
        # 3.2) mnist_with_tensorboard.py with native torch tb
        pip uninstall -y tensorboardX
        python examples/mnist/mnist_with_tensorboard.py --epochs=1

    - name: Run MNIST Example With Crash
      shell: bash -l {0}
      if: ${{ matrix.os == 'ubuntu-latest' }}
      continue-on-error: true
      run: |
        # 4) mnist_save_resume_engine.py
        python examples/mnist/mnist_save_resume_engine.py --epochs=2 --crash_iteration 1100
        
    - name: Resume MNIST from previous crash
      shell: bash -l {0}
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        python examples/mnist/mnist_save_resume_engine.py --epochs=2 --resume_from=/tmp/mnist_save_resume/checkpoint_1.pt

    - name: Run GAN example
      shell: bash -l {0}
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        # DCGAN
        python examples/gan/dcgan.py --dataset fake --dataroot /tmp/fakedata --output-dir /tmp/outputs-dcgan --batch-size 2 --epochs 2  --workers 0
    
    - name: Run RL Examples
      shell: bash -l {0}
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        # RL
        # 1) Actor-Critic
        python examples/reinforcement_learning/actor_critic.py --max-episodes=2
        # 2) Reinforce
        python examples/reinforcement_learning/reinforce.py --max-episodes=2

    - name: Run Neural Style Example
      shell: bash -l {0}
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        #fast-neural-style
        #train
        mkdir -p ~/.cache/torch/checkpoints/ && wget "https://download.pytorch.org/models/vgg16-397923af.pth" -O ~/.cache/torch/checkpoints/vgg16-397923af.pth
        python examples/fast_neural_style/neural_style.py train --epochs 1 --cuda 0 --dataset test --dataroot . --image_size 32 --style_image examples/fast_neural_style/images/style_images/mosaic.jpg --style_size 32
