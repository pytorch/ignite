language: python

python:
  - "2.7"
  - "3.6"

env:
  - PYTORCH_PACKAGE=pytorch-cpu
  - PYTORCH_PACKAGE=pytorch-nightly-cpu

stages:
  - Lint check
  - Test
  - Docs
  - Deploy
  - Nightly

before_install: &before_install
  - sudo apt-get update
  - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  # Useful for debugging any issues with conda
  - conda info -a
  - conda create -q -n test-environment -c pytorch python=$TRAVIS_PYTHON_VERSION $PYTORCH_PACKAGE
  - source activate test-environment
  - if [[ $TRAVIS_PYTHON_VERSION == 2.7 ]]; then pip install enum34 typing; fi
  # Test contrib dependencies
  - pip install tqdm==4.30.0 scikit-learn

install:
  - python setup.py install
  - pip install numpy mock pytest codecov pytest-cov
  # Examples dependencies
  - pip install visdom torchvision tensorboardX
  - pip install gym==0.10.11

script:
  - py.test --cov ignite --cov-report term-missing

  # Smoke tests for the examples
  # Mnist
  # 1) mnist.py
  - python examples/mnist/mnist.py --epochs=1
  # 2) mnist_with_visdom.py
  - python -c "from visdom.server import download_scripts; download_scripts()" # download scripts : https://github.com/facebookresearch/visdom/blob/master/py/server.py#L929
  - python -m visdom.server &
  - sleep 10
  - python examples/mnist/mnist_with_visdom.py --epochs=1
  - kill %1
  # 3) mnist_with_tensorboardx.py
  - python examples/mnist/mnist_with_tensorboardx.py --epochs=1

  # dcgan.py
  - python examples/gan/dcgan.py --dataset fake --dataroot /tmp/fakedata --output-dir /tmp/outputs-dcgan --batch-size 2 --epochs 2  --workers 0

  # RL
  # 1) Actor-Critic
  - python examples/reinforcement_learning/actor_critic.py --max-episodes=2
  # 2) Reinforce
  - python examples/reinforcement_learning/reinforce.py --max-episodes=2

  #fast-neural-style
  #train
  - python examples/fast_neural_style/neural_style.py train --epochs 1 --cuda 0 --dataset test --dataroot . --image_size 32 --style_image examples/fast_neural_style/images/style_images/mosaic.jpg --style_size 32

after_success:
  - codecov


jobs:
  include:
    - stage: Lint check
      python: "3.5"
      before_install: # Nothing to do
      install: pip install flake8
      script: flake8
      after_success: # Nothing to do

    # GitHub Pages Deployment: https://docs.travis-ci.com/user/deployment/pages/
    - stage: Docs
      python: "3.5"
      if: branch != nightly
      # Use previously defined before_install
      before_install: *before_install

      install:
        - pip install -r docs/requirements.txt
        # `pip install .` vs `python setup.py install` : 1st works better to produce _module/ignite with source links
        - pip install .

      script:
        - cd docs && make html
        # Create .nojekyll file to serve correctly _static and friends
        - touch build/html/.nojekyll
      after_success: # Nothing to do

      # Deploy built docs when PR is merged to master
      deploy:
        provider: pages
        skip-cleanup: true
        github-token: $GITHUB_TOKEN  # Set in the settings page of your repository, as a secure variable
        keep-history: false
        local_dir: docs/build/html
        on:
          branch: master

    - stage: Deploy
      python: "3.5"
      env:
        - PYTORCH_PACKAGE=pytorch-cpu
      if: tag IS present

      # Use previously defined before_install
      before_install: *before_install

      install:
        - python setup.py install

      script: true

      after_success: # Nothing to do

      before_deploy:
        # Conda deploy if on tag
        # ANACONDA_TOKEN should be provided by Travis
        # How to generate ANACONDA_TOKEN: https://docs.anaconda.com/anaconda-cloud/user-guide/tasks/work-with-accounts#creating-access-tokens

        # https://conda.io/docs/user-guide/tasks/build-packages/install-conda-build.html
        - conda install -y conda-build conda-verify anaconda-client
        - conda config --set anaconda_upload no
        - travis_wait 60 conda build --quiet --no-test --output-folder conda_build conda.recipe
        # Convert to other platforms: OSX, WIN
        - conda convert --platform win-64 conda_build/linux-64/*.tar.bz2 -o conda_build/
        - conda convert --platform osx-64 conda_build/linux-64/*.tar.bz2 -o conda_build/
        # Upload to Anaconda
        # We could use --all but too much platforms to uploaded
        - ls conda_build/*/*.tar.bz2 | xargs -I {} anaconda -v -t $ANACONDA_TOKEN upload -u pytorch {}


      # PyPI Deployment: https://docs.travis-ci.com/user/deployment/pypi/
      deploy:

        provider: pypi

        user: $PYPI_USER
        # If password contains non alphanumeric characters
        # https://github.com/travis-ci/dpl/issues/377
        # pass it as secured variable
        password: $PYPI_TOKEN
        # otherwise, follow "How to encrypt the password": https://docs.travis-ci.com/user/encryption-keys/
        # `travis encrypt deploy.password="password"`
        #  secure: "secured_password"

        skip_cleanup: true

        distributions: "sdist bdist_wheel"

        on:
          tags: true

    - stage: Nightly
      python: "3.5"
      env:
        - PYTORCH_PACKAGE=pytorch-nightly-cpu
      if: branch = nightly
      # Use previously defined before_install
      before_install: *before_install
      install:
        # Merge master into nightly
        - git fetch origin master
        - git merge FETCH_HEAD --no-edit
        # Copy "nightly" files
        - cp nightly/setup_nightly.py setup.py
        - cp -R nightly/conda.recipe .
        # Push to nightly branch
        - git remote rm origin && git remote add origin https://$GITHUB_TOKEN@github.com/${TRAVIS_REPO_SLUG}.git
        - git push origin nightly
      script: true
      after_success: # Nothing to do
      before_deploy:
        # Conda deploy if on tag
        # ANACONDA_TOKEN should be provided by Travis
        # How to generate ANACONDA_TOKEN: https://docs.anaconda.com/anaconda-cloud/user-guide/tasks/work-with-accounts#creating-access-tokens
        # https://conda.io/docs/user-guide/tasks/build-packages/install-conda-build.html
        - conda install -y conda-build conda-verify anaconda-client
        - conda config --set anaconda_upload no
        - travis_wait 60 conda build --quiet --no-test --output-folder conda_build conda.recipe -c pytorch
        # Convert to other platforms: OSX, WIN
        - conda convert --platform win-64 conda_build/linux-64/*.tar.bz2 -o conda_build/
        - conda convert --platform osx-64 conda_build/linux-64/*.tar.bz2 -o conda_build/
        # Upload to Anaconda
        # We could use --all but too much platforms to uploaded
        - ls conda_build/*/*.tar.bz2 | xargs -I {} anaconda -v -t $ANACONDA_TOKEN upload -u pytorch {}

      # PyPI Deployment: https://docs.travis-ci.com/user/deployment/pypi/
      deploy:
        provider: pypi
        user: $PYPI_USER
        # If password contains non alphanumeric characters
        # https://github.com/travis-ci/dpl/issues/377
        # pass it as secured variable
        password: $PYPI_TOKEN
        # otherwise, follow "How to encrypt the password": https://docs.travis-ci.com/user/encryption-keys/
        # `travis encrypt deploy.password="password"`
        #  secure: "secured_password"
        skip_cleanup: true
        distributions: "sdist bdist_wheel"
        on:
          branch: nightly
