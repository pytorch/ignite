[build-system]
requires = ["hatchling>=1.24.2"]
build-backend = "hatchling.build"

[project]
name = "pytorch-ignite"
authors = [
    {name = "PyTorch-Ignite Team", email = "contact@pytorch-ignite.ai"},
]
description = "A lightweight library to help with training neural networks in PyTorch."
readme = "README.md"
license = "BSD-3-Clause"
license-files = ["LICENSE"]
classifiers = [
    "Programming Language :: Python :: 3",
]
requires-python = ">=3.9,<=3.13"
dependencies = [
    "torch>=1.10,<3",
    "packaging"
]
dynamic = ["version"]

[project.urls]
Homepage = "https://pytorch-ignite.ai"
Repository = "https://github.com/pytorch/ignite"

[tool.hatch.version]
path = "ignite/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["ignite"]
only-include = ["ignite"]
artifacts = [
  "*.typed",
]

[tool.ruff]
src = ["ignite", "examples", "tests"]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "assets",
]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.9
target-version = "py39"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = ["E402", "E713", "E721", "E722", "E203", "E231", "F403", "F841"]  # "W503",

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
known-third-party = ["clearml", "dill", "matplotlib", "numpy", "pkg_resources", "pytest", "requests", "setuptools", "skimage", "sklearn", "torch", "torchvision"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", ]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.black]
line-length = 120
target-version = ['py39', 'py311']
include = '\.pyi?$'
exclude = '''

(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | assets
  )/
  | foo.py           # also separately exclude a file named foo.py in
                     # the root of the project
)
'''

[tool.pytest.ini_options]
markers = [
    "distributed: mark a test with distributed option",
    "multinode_distributed: mark a test with multi-node distributed option",
    "tpu: mark a test as requiring XLA",
]
addopts = "--color=yes"
